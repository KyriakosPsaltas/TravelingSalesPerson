<diagram program="umletino" version="14.2"><zoom_level>10</zoom_level><help_text>Space for diagram notes</help_text><element><id>UMLClass</id><coordinates><x>0</x><y>13</y><w>320</w><h>170</h></coordinates><panel_attributes>Map
--

--
void randomizeMap(int nrCities,Position mapSize)
int getNrCities()
City getCity(int i)
double getDistance(int c1,int c2)
Route initRoute()
void save(string filename)
void load(string filename)</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>0</x><y>253</y><w>210</w><h>100</h></coordinates><panel_attributes>City
--
string name
--
init(string name,Position position)
string getName()
Position getPosition()</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>0</x><y>413</y><w>210</w><h>110</h></coordinates><panel_attributes>Position
--
List&lt;float&gt; coordinates
--
init(List&lt;float&gt; coordinates)
List&lt;float&gt; getCoordinates()
double distance(Position p2)
Position random()</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>370</x><y>13</y><w>280</w><h>260</h></coordinates><panel_attributes>Route
--
List&lt;int&gt; route
Set&lt;int&gt; remainingCities
double distance
--
init(int nrCities,int startCity)
List&lt;int&gt; getRoute()
float getDistance()
Set&lt;int&gt; getRemainingCities()
int getCurrentCity()
bool isComplete()
void selectNextCity(Map myMap,int nextCity)
void unselectLastCity(Map myMap)
void randomize(Map myMap)
void randomSwapCities(Map myMap,int nrCities)
void save(string filename)
void load(string filename)
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>90</x><y>173</y><w>40</w><h>100</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;-
1

n</panel_attributes><additional_attributes>10;10;10;80</additional_attributes></element><element><id>Relation</id><coordinates><x>90</x><y>343</y><w>40</w><h>90</h></coordinates><panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
1</panel_attributes><additional_attributes>10;10;10;70</additional_attributes></element><element><id>UMLClass</id><coordinates><x>980</x><y>673</y><w>260</w><h>80</h></coordinates><panel_attributes>DepthFirstAlgorithm
--

--
init(bool branchAndBound)
recursiveDepthFirst(Map myMap,Route route)</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>50</x><y>673</y><w>110</w><h>80</h></coordinates><panel_attributes>RandomAlgorithm
--

--
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>170</x><y>673</y><w>230</w><h>100</h></coordinates><panel_attributes>HillClimberAlgorithm
--

--
init(int nrIteration,int restartCounter)
bool acceptNewRoute(oldRoute,newRoute)
hillClimberRun(Map myMap,Route route)</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>420</x><y>673</y><w>260</w><h>80</h></coordinates><panel_attributes>GreedyAlgorithm
--

--
int getClosestCity(Map myMap,Route route)
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>690</x><y>673</y><w>280</w><h>80</h></coordinates><panel_attributes>BreadthFirstAlgorithm
--

--
breadthFirst(Map myMap,List&lt;Route&gt; generation)</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>490</x><y>313</y><w>210</w><h>220</h></coordinates><panel_attributes>Algorithm
--
float timeStart
float timeStop
List&lt;double&gt; scores
--
Route run(Map map)
reset()
updateBestRoute(Route route)
Route getBestRoute()
startTimer()
stopTimer()
double getTime()
addScore(double score)
List&lt;double&gt; getScores()</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>150</x><y>630</y><w>70</w><h>60</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>50;10;10;40</additional_attributes></element><element><id>Relation</id><coordinates><x>280</x><y>630</y><w>70</w><h>60</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;10;50;40</additional_attributes></element><element><id>Relation</id><coordinates><x>600</x><y>630</y><w>180</w><h>60</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>160;10;10;40</additional_attributes></element><element><id>Relation</id><coordinates><x>830</x><y>630</y><w>30</w><h>70</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;43</additional_attributes></element><element><id>UMLClass</id><coordinates><x>160</x><y>573</y><w>210</w><h>70</h></coordinates><panel_attributes>IterativeAlgorithm
--

--
init(int nrIteration)
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>710</x><y>583</y><w>210</w><h>60</h></coordinates><panel_attributes>ConstructiveAlgorithm
--

--
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>330</x><y>520</y><w>210</w><h>70</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>190;10;10;50</additional_attributes></element><element><id>Relation</id><coordinates><x>670</x><y>520</y><w>90</w><h>80</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;10;70;60</additional_attributes></element><element><id>Relation</id><coordinates><x>308</x><y>110</y><w>80</w><h>40</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>10;10;60;13</additional_attributes></element><element><id>Relation</id><coordinates><x>890</x><y>630</y><w>200</w><h>70</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;10;180;43</additional_attributes></element><element><id>UMLClass</id><coordinates><x>170</x><y>803</y><w>230</w><h>90</h></coordinates><panel_attributes>SimulatedAnnealing
--

--
init(int nrIteration,int restartCounter)
bool acceptNewRoute(oldRoute,newRoute)
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>280</x><y>760</y><w>30</w><h>60</h></coordinates><panel_attributes>lt=&lt;&lt;-</panel_attributes><additional_attributes>10;10;10;40</additional_attributes></element></diagram>